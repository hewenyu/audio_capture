Metadata-Version: 2.2
Name: audio-capture
Version: 0.1.0
Summary: A cross-platform audio capture library for Python
Home-page: https://github.com/hewenyu/audio_capture
Author: hewenyu
Author-email: your.email@example.com
Project-URL: Bug Tracker, https://github.com/hewenyu/audio_capture/issues
Project-URL: Documentation, https://github.com/hewenyu/audio_capture/tree/main/python#readme
Project-URL: Source Code, https://github.com/hewenyu/audio_capture
Keywords: audio capture recording wasapi pulseaudio
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Multimedia :: Sound/Audio :: Capture/Recording
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.19.0
Requires-Dist: soundfile>=0.10.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: project-url
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Audio Capture for Python

这是 [audio_capture](https://github.com/hewenyu/audio_capture) 的 Python 绑定，提供了简单易用的 Python API 来捕获系统音频或特定应用程序的音频输出。

## 特性

- 零依赖安装：预编译的二进制文件已包含在包中
- 跨平台支持：
  - Windows: 使用 WASAPI (Windows Audio Session API)
  - Linux: 使用 PulseAudio
- NumPy 集成：音频数据直接以 NumPy 数组形式提供
- 支持 WAV 文件写入
- 支持捕获特定应用程序的音频

## 安装

```bash
pip install audio-capture
```

## 快速开始

### 基本用法

```python
import time
from audio_capture import AudioCapture

def audio_callback(data):
    print(f"收到音频数据: {len(data)} 个采样点")

# 使用上下文管理器自动管理资源
with AudioCapture() as capture:
    # 设置音频回调
    capture.set_callback(audio_callback)
    
    # 开始录音
    capture.start()
    
    # 录制5秒
    time.sleep(5)
    
    # 停止录音会自动调用
```

### 录制到 WAV 文件

```python
from audio_capture import AudioCapture, WavWriter

# 创建 WAV 文件写入器
wav_writer = WavWriter(
    "output.wav",
    sample_rate=16000,
    channels=1,
    bits_per_sample=16
)

def save_to_wav(data):
    wav_writer.write_float32(data)

with AudioCapture() as capture:
    # 设置音频回调
    capture.set_callback(save_to_wav)
    
    # 开始录音
    capture.start()
    
    # 等待用户输入
    input("按回车键停止录音...")

# WAV 文件会自动关闭
```

### 捕获特定应用程序的音频

```python
from audio_capture import AudioCapture

with AudioCapture() as capture:
    # 列出正在播放音频的应用
    apps = capture.list_applications()
    print("可用的应用程序:")
    for pid, name in apps.items():
        print(f"  {pid}: {name}")

    # 选择要捕获的应用程序
    pid = int(input("输入要捕获的应用程序PID: "))
    
    def process_audio(data):
        print(f"捕获到应用程序音频: {len(data)} 个采样点")
    
    # 设置回调
    capture.set_callback(process_audio)
    
    # 开始捕获特定应用程序的音频
    capture.start_capturing_process(pid)
    
    # 等待用户输入
    input("按回车键停止录音...")
```

## API 文档

### AudioCapture 类

主要的音频捕获类，提供以下方法：

- `initialize()`: 初始化音频捕获
- `start()`: 开始录音
- `stop()`: 停止录音
- `cleanup()`: 清理资源
- `set_callback(callback)`: 设置音频数据回调
- `get_format()`: 获取音频格式
- `list_applications()`: 列出正在播放音频的应用
- `start_capturing_process(pid)`: 开始捕获指定进程的音频

### AudioFormat 类

音频格式信息类，包含以下属性：

- `sample_rate`: 采样率
- `channels`: 声道数
- `bits_per_sample`: 位深度

### WavWriter 类

WAV 文件写入器，提供以下方法：

- `write_float32(data)`: 写入 float32 格式的音频数据
- `close()`: 关闭文件

## 系统要求

- Python 3.7 或更高版本
- Windows 7+ 或支持 PulseAudio 的 Linux 系统
- NumPy
- SoundFile (用于 WAV 文件写入)

## 许可证

本项目采用 MIT 许可证。详见 [LICENSE](LICENSE) 文件。 
